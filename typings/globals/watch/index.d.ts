// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/56295f5058cac7ae458540423c50ac2dcf9fc711/watch/watch.d.ts
declare module "watch" {
    import fs = require("fs");
    import events = require("events");

    export interface Monitor extends events.EventEmitter {
        on(event: "created", listener: (filename:string, stat: fs.Stats) => void);
        on(event: "changed", listener: (filename:string, stat: fs.Stats, prev: fs.Stats) => void);
        on(event: "removed", listener: (filename:string, stat: fs.Stats) => void);
        on(event: string, listener: Function): this;
    }

    export interface Options {
        persistent?: boolean;
        ignoreDotFiles?: boolean;
        filter?: any;
        interval?: number;
    }

    export function watchTree(root: string, callback: (f: any, curr: fs.Stats, prev: fs.Stats) => void): void;
    export function watchTree(root: string, options: Options, callback: (f: any, curr: fs.Stats, prev: fs.Stats) => void): void;
    export function unwatchTree(root: string): void;
    export function createMonitor(root: string, callback: (monitor: Monitor) => void): void;
    export function createMonitor(root: string, options: Options, callback: (monitor: Monitor) => void): void;
}